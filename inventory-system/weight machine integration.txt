import React, { useState, useEffect, useCallback } from 'react';
import { format } from 'date-fns';
import axios from 'axios';
import Papa from 'papaparse';
import { AlertCircle, CheckCircle, Scale } from 'lucide-react';

const PCSEntryManagement = () => {
  // State Management
  const [entries, setEntries] = useState([]);
  const [filteredEntries, setFilteredEntries] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [formData, setFormData] = useState({
    color: '',
    size: '',
    weight: '',
    serialNo: '',
    barcodeValue: '',
    operatorName: ''
  });
  const [dateRange, setDateRange] = useState({
    startDate: '',
    endDate: ''
  });
  const [selectedEntry, setSelectedEntry] = useState(null);
  const [mode, setMode] = useState('add');
  const [lastSerialNumber, setLastSerialNumber] = useState(0);
  
  // Weight Scale State
  const [weight, setWeight] = useState('');
  const [weightDevice, setWeightDevice] = useState(null);
  const [isWeightConnected, setIsWeightConnected] = useState(false);
  const [weightError, setWeightError] = useState('');
  const [isWeightReading, setIsWeightReading] = useState(false);
  const [connectionAttempts, setConnectionAttempts] = useState(0);
  const [autoUpdateWeight, setAutoUpdateWeight] = useState(true);

  // Constants
  const WEIGHT_READING_INTERVAL = 500; // ms
  const MAX_CONNECTION_ATTEMPTS = 3;
  const RETRY_DELAY = 2000; // ms

  // Initial Setup
  useEffect(() => {
    fetchEntries();
    checkSavedWeightDevice();
    
    return () => {
      if (weightDevice) {
        closeWeightConnection();
      }
    };
  }, []);

  // Filter and Search Effects
  useEffect(() => {
    filterEntries();
  }, [entries, dateRange, searchTerm]);

  useEffect(() => {
    if (entries.length > 0) {
      updateLastSerialNumber();
    }
  }, [entries]);

  // Serial Number Management
  const updateLastSerialNumber = () => {
    const maxSerial = Math.max(...entries.map(entry => {
      const num = parseInt(entry.serial_no.replace(/^\D+/g, ''));
      return isNaN(num) ? 0 : num;
    }));
    setLastSerialNumber(maxSerial);
  };

  const generateNextSerialNumber = () => {
    const nextNumber = lastSerialNumber + 1;
    return `PCS${nextNumber.toString().padStart(6, '0')}`;
  };

  // Weight Scale Integration
  const checkSavedWeightDevice = async () => {
    try {
      const devices = await navigator.usb.getDevices();
      const savedDevice = devices.find(device => {
        // Add your weight scale identification logic here
        return device.vendorId === YOUR_VENDOR_ID && device.productId === YOUR_PRODUCT_ID;
      });
      
      if (savedDevice) {
        await connectToDevice(savedDevice);
      }
    } catch (error) {
      console.error('Error checking saved devices:', error);
    }
  };

  const initializeWeightScale = async () => {
    try {
      setConnectionAttempts(prev => prev + 1);
      
      const device = await navigator.usb.requestDevice({
        filters: [
          // Add your weight scale's vendor ID and product ID here
          { vendorId: YOUR_VENDOR_ID, productId: YOUR_PRODUCT_ID }
        ]
      });

      await connectToDevice(device);
    } catch (error) {
      handleWeightError('Failed to connect to weight scale', error);
      
      if (connectionAttempts < MAX_CONNECTION_ATTEMPTS) {
        setTimeout(() => {
          initializeWeightScale();
        }, RETRY_DELAY);
      }
    }
  };

  const connectToDevice = async (device) => {
    try {
      await device.open();
      await device.selectConfiguration(1);
      await device.claimInterface(0);

      setWeightDevice(device);
      setIsWeightConnected(true);
      setWeightError('');
      setConnectionAttempts(0);

      startWeightReading(device);
    } catch (error) {
      handleWeightError('Error connecting to device', error);
    }
  };

  const startWeightReading = async (device) => {
    setIsWeightReading(true);
    
    while (device.opened && isWeightReading) {
      try {
        const result = await device.transferIn(1, 64);
        
        if (result.data) {
          const weightData = new Uint8Array(result.data.buffer);
          const weightValue = parseWeightData(weightData);
          
          setWeight(weightValue);
          if (autoUpdateWeight) {
            setFormData(prev => ({ ...prev, weight: weightValue }));
          }
        }
      } catch (error) {
        handleWeightError('Error reading weight', error);
        break;
      }
      
      await new Promise(resolve => setTimeout(resolve, WEIGHT_READING_INTERVAL));
    }
  };

  const parseWeightData = (data) => {
    try {
      // Implement parsing logic specific to your weight scale's data format
      // This is a placeholder implementation - modify according to your device's protocol
      let weight = 0;
      if (data.length >= 4) {
        // Example: Convert 4 bytes to weight value
        weight = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
        weight = parseFloat((weight / 100).toFixed(2)); // Convert to kg/lbs with 2 decimal places
      }
      return weight;
    } catch (error) {
      handleWeightError('Error parsing weight data', error);
      return 0;
    }
  };

  const closeWeightConnection = async () => {
    if (weightDevice) {
      try {
        setIsWeightReading(false);
        await weightDevice.close();
        setIsWeightConnected(false);
        setWeightDevice(null);
        setWeight('');
      } catch (error) {
        handleWeightError('Error closing connection', error);
      }
    }
  };

  const handleWeightError = (message, error) => {
    console.error(`${message}:`, error);
    setWeightError(`${message}: ${error.message}`);
    setIsWeightConnected(false);
  };

  // API Operations
  const fetchEntries = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/pcs');
      setEntries(response.data);
    } catch (error) {
      console.error('Fetch error:', error);
      // Show error notification
    }
  };

  const filterEntries = () => {
    let filtered = [...entries];

    // Date range filtering
    const { startDate, endDate } = dateRange;
    if (startDate || endDate) {
      filtered = filtered.filter(entry => {
        const entryDate = new Date(entry.created_at);
        const start = startDate ? new Date(startDate) : null;
        const end = endDate ? new Date(endDate) : null;
        return (!start || entryDate >= start) && (!end || entryDate <= end);
      });
    }

    // Search term filtering
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(entry => 
        Object.values(entry).some(value => 
          String(value).toLowerCase().includes(searchLower)
        )
      );
    }

    setFilteredEntries(filtered);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        color: formData.color,
        size: formData.size,
        weight: parseFloat(formData.weight),
        serial_no: mode === 'add' ? generateNextSerialNumber() : formData.serialNo,
        barcode_value: formData.barcodeValue,
        operator_name: formData.operatorName
      };

      if (mode === 'add') {
        await axios.post('http://localhost:5000/api/pcs', payload);
      } else {
        await axios.put(`http://localhost:5000/api/pcs/${selectedEntry.id}`, payload);
      }

      await fetchEntries();
      resetForm();
    } catch (error) {
      console.error('Submit error:', error);
      // Show error notification
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this entry?')) {
      try {
        await axios.delete(`http://localhost:5000/api/pcs/${id}`);
        await fetchEntries();
      } catch (error) {
        console.error('Delete error:', error);
        // Show error notification
      }
    }
  };

  const handleEdit = (entry) => {
    setSelectedEntry(entry);
    setMode('edit');
    setFormData({
      color: entry.color,
      size: entry.size,
      weight: entry.weight,
      serialNo: entry.serial_no,
      barcodeValue: entry.barcode_value,
      operatorName: entry.operator_name
    });
  };

  const resetForm = () => {
    setFormData({
      color: '',
      size: '',
      weight: '',
      serialNo: '',
      barcodeValue: '',
      operatorName: ''
    });
    setMode('add');
    setSelectedEntry(null);
  };

  // Export Functions
  const downloadCSV = (entries) => {
    const dataToDownload = Array.isArray(entries) ? entries : [entries];
    const csv = Papa.unparse(dataToDownload.map(entry => ({
      'Serial Number': entry.serial_no,
      'Color': entry.color,
      'Size': entry.size,
      'Weight': entry.weight,
      'Barcode': entry.barcode_value,
      'Operator Name': entry.operator_name,
      'Created At': format(new Date(entry.created_at), 'yyyy-MM-dd HH:mm:ss')
    })));

    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `pcs_entries_${format(new Date(), 'yyyyMMdd_HHmmss')}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handlePrint = (entry) => {
    const entriesToPrint = Array.isArray(entry) ? entry : [entry];
    const printContent = `
      <html>
        <head>
          <title>PCS Entries Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 0.5cm; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f4f4f4; }
            h1 { margin-bottom: 20px; }
            .footer { margin-top: 20px; font-size: 0.9em; color: #666; }
            @media print {
              body { margin: 0.5cm; }
              .footer { position: fixed; bottom: 0; width: 100%; }
            }
          </style>
        </head>
        <body>
          <h1>PCS Entries Report</h1>
          <table>
            <thead>
              <tr>
                <th>Serial Number</th>
                <th>Color</th>
                <th>Size</th>
                <th>Weight</th>
                <th>Barcode</th>
                <th>Operator Name</th>
                <th>Created At</th>
              </tr>
            </thead>
            <tbody>
              ${entriesToPrint.map(entry => `
                <tr>
                  <td>${entry.serial_no}</td>
                  <td>${entry.color}</td>
                  <td>${entry.size}</td>
                  <td>${entry.weight}</td>
                  <td>${entry.barcode_value}</td>
                  <td>${entry.operator_name}</td>
                  <td>${format(new Date(entry.created_at), 'yyyy-MM-dd HH:mm:ss')}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
          <div class="footer">
            <p>Generated on: ${format(new Date(), 'yyyy-MM-dd HH:mm:ss')}</p>
            <p>Total Entries: ${entriesToPrint.length}</p>
          </div>
        </body>
      </html>
    `;

    const printWindow = window.open('', '', 'width=800,height=600');
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    setTimeout(() => printWindow.close(), 1000);
  };

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">PCS Entry Management</h1>
      
      {/* Weight Scale Status */}
      <div className="mb-6">
        <div className="flex items-center gap-4 p-4 bg-gray-50 rounded-lg">
          <Scale className={isWeightConnected ? 'text-green-500' : 'text-gray-400'} />
          <div>
            <h2 className="text-lg font-semibold">Weight Scale Status</h2>
            <p className={`${isWeightConnected ? 'text-green-600' : 'text-gray-600'}`}>
              {isWeightConnected ? 'Connected' : 'Disconnected'}
            </p>
          </div>
          <div className="ml-auto">
            {!isWeightConnected ? (
              <button
                onClick={initializeWeightScale}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                disabled={connectionAttempts >= MAX_CONNECTION_ATTEMPTS}
              >
                Connect Scale
              </button>
            ) : (
              <button
                onClick={closeWeightConnection}
                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
              >
                Disconnect
              </button>
            )}
          </div>
        </div>
        
        {weightError && (
          <Alert variant="destructive" className="mt-2">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{weightError}</AlertDescription>
          </Alert>
        )}
      </div>

      {/* Entry Form */}
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-sm mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Color</label>
            <input 
              type="text" 
              value={formData.color} 
              onChange={(e) => setFormData({...formData, color: e.target.value})} 
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              required
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Size</label>
            <input 
              type="text" 
              value={formData.size} 
              onChange={(e) => setFormData({...formData, size: e.target.value})} 
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              required
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Weight</label>
            <div className="relative">
              <input 
                type="number" 
                step="0.01"
                value={formData.weight} 
                onChange={(e) => setFormData({...formData, weight: e.target.value})} 
                className={`w-full border rounded-md p-2 ${
                  isWeightConnected ? 'bg-green-50 focus:ring-2 focus:ring-green-500 focus:border-green-500' 
                  : 'focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                }`}
                required
              />
              {isWeightConnected && (
                <div className="absolute right-2 top-2 flex items-center">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span className="ml-1 text-sm text-green-600">Auto</span>
                </div>
              )}
            </div>
            <div className="flex items-center mt-1">
              <input
                type="checkbox"
                checked={autoUpdateWeight}
                onChange={(e) => setAutoUpdateWeight(e.target.checked)}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label className="ml-2 text-sm text-gray-600">
                Auto-update weight from scale
              </label>
            </div>
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Serial Number</label>
            {mode === 'edit' ? (
              <input 
                type="text" 
                value={formData.serialNo} 
                className="w-full border rounded-md p-2 bg-gray-100" 
                readOnly 
              />
            ) : (
              <div className="w-full border rounded-md p-2 bg-gray-100">
                {generateNextSerialNumber()}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Barcode</label>
            <input 
              type="text" 
              value={formData.barcodeValue} 
              onChange={(e) => setFormData({...formData, barcodeValue: e.target.value})} 
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              required
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Operator Name</label>
            <input 
              type="text" 
              value={formData.operatorName} 
              onChange={(e) => setFormData({...formData, operatorName: e.target.value})} 
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
              required
            />
          </div>
        </div>

        <div className="mt-6 flex gap-4">
          <button 
            type="submit" 
            className="flex-1 bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            {mode === 'add' ? 'Add Entry' : 'Update Entry'}
          </button>
          {mode === 'edit' && (
            <button 
              type="button" 
              onClick={resetForm}
              className="flex-1 bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
            >
              Cancel
            </button>
          )}
        </div>
      </form>

      {/* Search and Filter Section */}
      <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Start Date</label>
            <input 
              type="date" 
              value={dateRange.startDate} 
              onChange={(e) => setDateRange({...dateRange, startDate: e.target.value})} 
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
            />
          </div>
          
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">End Date</label>
            <input 
              type="date" 
              value={dateRange.endDate} 
              onChange={(e) => setDateRange({...dateRange, endDate: e.target.value})} 
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
            />
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">Search</label>
            <input 
              type="text" 
              placeholder="Search in any field..." 
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Bulk Actions */}
      <div className="mb-6 flex flex-wrap gap-4">
        <button 
          onClick={() => handlePrint(filteredEntries)} 
          className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Print All
        </button>
        <button 
          onClick={() => downloadCSV(filteredEntries)} 
          className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
        >
          Download CSV
        </button>
        
        {(searchTerm || dateRange.startDate || dateRange.endDate) && (
          <span className="text-sm text-gray-600 self-center">
            Showing {filteredEntries.length} of {entries.length} entries
          </span>
        )}
      </div>

      {/* Entries Table */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Serial Number
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Color
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Size
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Weight
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Barcode
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Operator
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Created At
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredEntries.map(entry => (
                <tr key={entry.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {entry.serial_no}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {entry.color}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {entry.size}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {entry.weight}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {entry.barcode_value}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {entry.operator_name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {format(new Date(entry.created_at), 'yyyy-MM-dd HH:mm:ss')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex gap-2">
                      <button 
                        onClick={() => handleEdit(entry)}
                        className="text-yellow-600 hover:text-yellow-900"
                      >
                        Edit
                      </button>
                      <button 
                        onClick={() => handleDelete(entry.id)}
                        className="text-red-600 hover:text-red-900"
                      >
                        Delete
                      </button>
                      <button 
                        onClick={() => handlePrint(entry)}
                        className="text-gray-600 hover:text-gray-900"
                      >
                        Print
                      </button>
                      <button 
                        onClick={() => downloadCSV(entry)}
                        className="text-green-600 hover:text-green-900"
                      >
                        CSV
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {entries.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            No entries found. Add your first entry using the form above.
          </div>
        )}

        {entries.length > 0 && filteredEntries.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            No entries match your search criteria.
          </div>
        )}
      </div>

      {/* Summary Footer */}
      <div className="mt-4 text-sm text-gray-600">
        <div className="flex justify-between items-center">
          <div>
            Total Entries: {entries.length}
            {filteredEntries.length !== entries.length && (
              <span className="ml-2">| Filtered Entries: {filteredEntries.length}</span>
            )}
          </div>
          {isWeightConnected && (
            <div className="text-green-600">
              Current Scale Reading: {weight} kg
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PCSEntryManagement;